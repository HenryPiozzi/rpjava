Grupo: Henry Gabriel Piozzi (24002752), Pedro Ximenes Costa (24000763)

- Descrição do projeto:

O projeto consiste em um RPG de texto em Java intitulado “A Lenda dos Cristais Ancestrais”. 
O jogo permite ao jogador escolher uma classe (Guerreiro, Mago ou Arqueiro), enfrentar inimigos, coletar itens e evoluir de nível conforme as batalhas.

- Como rodar? Vá à pasta do projeto e abra o CMD do projeto. Em seguida use esses comandos:

Compila tudo de uma vez.
========================
javac *.java 
========================

Executa o jogo
========================
java Jogo 
========================

- Tarefas feitas por cada integrante:

Henry Gabriel Piozzi - 24002752 (Desenvolveu Inimigo, Item, Inventário)

Item.java
Classe que representa os itens usados no jogo, contendo atributo de nome, descrição, efeito, potencia e quantidade, 
na própria classe tem a criação de variáveis estáticas que server para a geração de itens aleatórios pela função itemAleatorio, 
a classe Item tem o equals, hashcode, to string e comparable próprios, a função usar que retorna o tipo de efeito e a potencia dele, 
adicionar quantidade, que pega um item já na classe Inventario do Personagem e adicionar a quantidade daquele item que ele recebeu, 
os getters, setters construtor e construtor de copiar foram feitos

Inventario.java
Classe que repsenta o Inventario possuído pelo personagem, com um único atributo que é uma lista de itens, 
ele tem um construtor, um get dos itens. um listarItens, equals e hashCode, um construtor de copia 
e as funções listarItens, que mostra todos os Itens presentes no Inventario, 
adicionarItem, que adiciona um Item no Inventario 
e a função de usarItem que verifica se o item está presente no inventario e chama a função de usar dele, retornando o que vier dela

Autoavaliação:
9/10
Nós nos esforçamos muito nesse trabalho, curtimos bastante de faze-lo e não conseguimos achar nenhum erro aparente, 
tentamos fazer tudo segundo as normas passadas, com construtores, clones, gets e sets,
provavelmente tenha algum erro que não consigo ver, mas pra mim ta bom

Inimigo.java
Uma classe que não adiciona nenhum atributo à classe Personagem, mas que tem uma função static que retorna um inimigo aleatório, ela recebe o capitulo atual do personagem na historia, aumentando a força de acordo com o capitulo, com próprio construtor

Pedro Ximenes Costa - 24000763 (Desenvolveu Personagem, Guerreiro, Mago, Arqueiro)

Personagem.java
Classe que representa o jogador e inimigos. Contém os atributos nome, pontos de vida, pontos de vida máximo, ataque, defesa,
nível e inventário. Também, há os atributos para quando estiver usando a poção: bônus de ataque temporário, bônus de defesa temporário e efeito ativo.
Implementa os métodos de ataque, defesa, uso de itens, subida de nível e efeitos temporários.

Construtores:
Personagem(String nome, short pontosVida, short ataque, short defesa, byte nivel, Inventario inventario) – Inicializa os atributos principais do personagem.
Personagem(Personagem modelo) – Construtor de cópia que clona outro personagem existente.

Getters e Setters:
- Métodos de acesso e modificação de atributos (getNome(), setNome(String nome), setPontosVida(short pontosVida), getPontosVida(), setPontosVidaMaximo(short pontosVidaMaximo), getPontosVidaMaximo(),
setAtaque(short ataque), getAtaque(), setDefesa(short defesa), getDefesa(), setNivel(byte nível), getNivel(), setInventario(Inventario inventario), getInventario(), getBonusAtaqueTemporario(),
setBonusAtaqueTemporario(short bonusAtaqueTemporario), getBonusDefesaTemporario(), setBonusDefesaTempoarario(short bonusDefesaTemporario), isEfeitoAtivo(), setEfeitoAtivo(boolean efeitoAtivo)).

Métodos de combate:
batalhar(Inimigo inimigo) – Controla toda a lógica de batalha entre o jogador e o inimigo, incluindo turnos e resultados.
atacar(Inimigo inimigo, Random random) – Realiza os cálculos de ataque e defesa com rolagem de dados e aplica o dano.
fugir(Random random) – Implementa a tentativa de fuga, com chance de sucesso e dano em caso de falha.

Métodos de itens e efeitos:
- usarItem() – Exibe o inventário, permite escolher um item e aplica seus efeitos.
- aplicarEfeitoTemporario(String[] efeitos) – Aplica efeitos específicos dos itens (cura, buffs de ataque ou defesa, etc.).

Método de progressão:
- uparNivel(byte nivel) – Incrementa o nível do personagem e permite melhorar um atributo (vida, ataque ou defesa).

Outros métodos:
- toString() – Retorna uma string com as informações completas do personagem.
- equals(Object obj) – Compara dois personagens para verificar se possuem os mesmos atributos principais (nome, nível, ataque, defesa, etc.).
- hashCode() – Gera um código numérico único para cada personagem, garantindo consistência com o método equals().
- clone() – Cria uma cópia completa do personagem, usada no sistema de save point. Na classe personagem é feita em abstract para ser usada em sua subclasses.

Guerreiro.java:
Subclasse que herda de Personagem. Possui mais vida e defesa.
Construtor utiliza super(nome, (short)25, (short)3, (short)5, (byte)1, new Inventario());

Mago.java:
Subclasse que herda de Personagem. Tem maior ataque, mas vida e defesa menores.
Construtor: super(nome, (short)18, (short)6, (short)3, (byte)1, new Inventario());

Arqueiro.java:
Subclasse que herda de Personagem. Classe balanceada, com atributos médios de ataque e defesa.
Construtor: super(nome, (short)20, (short)4, (short)4, (byte)1, new Inventario());

Todas as subclasses apresentam o método clone.

Autoavaliação:
Consegui implementar e testar as classes principais do sistema. Tive um melhor entendimento do controle de fluxo.
Apresentei dificuldades em tratamento de exceções em batalhas e cópias de objetos e também garantir o funcionamento correto da lógica de ataque e defesa.
Nota sugerida: 10 / 10

Henry Piozzi e Pedro Ximenes (Desenvolveram juntos a classe Jogo)

Jogo.java
Classe que representa a mecânica principal, consegue explorar os locais, exibir os status do jogador, criar um save point e carregá-lo e sair do jogo.

Construtor:
Jogo() – Inicializa todos os componentes do jogo, como o scanner, jogo ativo, o gerador de números aleatórios (Random), o estado do jogo (jogoAtivo), o capítulo atual, o contador de inimigos derrotados, os cristais purificados, save point e introdução mostrada

Métodos principais de controle do jogo:
- iniciarJogo() – Inicia a execução do jogo, chamando a introdução, a escolha da classe do personagem, a entrega dos itens iniciais e o loop principal.
- loopPrincipal() – Mostra o menu principal, que redireciona para as ações escolhidas (explorar, inventário, status, criar save point, carregar save point e sair do jogo).
- encerrarJogo() – Encerra o jogo exibindo uma mensagem.

Métodos de introdução e seleção:
- mostrarIntroducao() – Exibe o enredo inicial do jogo e apresenta a história do jogo.
- escolherClasse() – Permite ao jogador escolher entre Guerreiro, Mago ou Arqueiro, instanciando o personagem conforme a escolha.
- darItensIniciais() – Entrega poções de vida ao jogador logo após a escolha da classe.

Métodos de exploração:
- explorar() – Mostra as regiões disponíveis para explorar e direciona o jogador para a área escolhida.
- explorarFlorestaSombria() – Gerencia os eventos da floresta (combate, tesouro ou cristal).
- explorarCavernasDeGelo() – Gerencia os eventos das cavernas (combate, armadilhas ou cristal).
- explorarTorreCarmesim() – Gerencia os eventos da torre (inimigos fortes e itens raros).
- descansarNaVila() – Permite ao jogador recuperar completamente a vida e descansar entre as missões.

Métodos de progresso e vitória:
- verificarProgressoFloresta() – Controla o progresso da purificação do Cristal da Natureza.
- verificarProgressoCavernas() – Controla o progresso da purificação do Cristal da Água.
- verificarProgressoTorre() – Controla o progresso da purificação do Cristal do Fogo.
- verificarVitoria() – Verifica se os três cristais foram purificados e exibe a tela de vitória com estatísticas finais.
- verificarProgressoGeral() - Verifica se todos os cristais estão purificados para ir para a luta final.
- lutaFinal() - Após purificar os 3 cristais, o método é chamado aparecendo o boss final, faz um salvamento e vai para o método batalhar.
- vitoriaFinalBoss() - Mostra a mensagem quando é derrotado o Boss final.

Métodos de gerenciamento de save:
- criarSavePoint() – Cria uma cópia do personagem (clone) e salva o seu progresso.
-carregarSavePoint() – Restaura o progresso do jogador a partir do save point anterior.

Métodos de interface e exibição:
- mostrarStatusRapido() – Exibe um resumo com o status básico do jogador (nível, HP e cristais).
- exibirStatus() – Mostra o status completo do personagem e o progresso dos cristais.
- limparTela() – Simula a limpeza da tela no terminal.
pausar() – Pausa a execução até o jogador pressionar ENTER.

Método de fim de jogo:
- gameOver() – Mostra a tela de derrota e pergunta se o jogador deseja carregar o último save point.

Método main:
- Inicializa a classe e inicia o Jogo.


